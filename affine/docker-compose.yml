services:
  affine:
    image: ghcr.io/toeverything/affine-graphql:stable
    command:
      - sh
      - -c
      - node ./scripts/self-host-predeploy && node ./dist/index.js
    container_name: affine
    restart: unless-stopped
    networks:
      - tipi_main_network
    environment:
      NODE_OPTIONS: --import=./scripts/register.js
      AFFINE_CONFIG_PATH: /root/.affine/config
      REDIS_SERVER_HOST: affine-redis
      DATABASE_URL: postgres://tipi:${AFFINE_POSTGRES_PASSWORD}@affine-postgres:5432/affine
      NODE_ENV: production
      AFFINE_ADMIN_EMAIL: ${AFFINE_ADMIN_EMAIL}
      AFFINE_ADMIN_PASSWORD: ${AFFINE_ADMIN_PASSWORD}
      TELEMETRY_ENABLE: ${AFFINE_TELEMETRY_ENABLE}
    ports:
      - ${APP_PORT}:3010
    volumes:
      - ${APP_DATA_DIR}/data/config:/root/.affine/config
      - ${APP_DATA_DIR}/data/storage:/root/.affine/storage
    depends_on:
      affine-redis:
        condition: service_healthy
      affine-postgres:
        condition: service_healthy
    labels:
      generated: true
      traefik.enable: true
      traefik.http.middlewares.affine-web-redirect.redirectscheme.scheme: https
      traefik.http.services.affine.loadbalancer.server.port: "3010"
      traefik.http.routers.affine-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.affine-insecure.entrypoints: web
      traefik.http.routers.affine-insecure.service: affine
      traefik.http.routers.affine-insecure.middlewares: affine-web-redirect
      traefik.http.routers.affine.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.affine.entrypoints: websecure
      traefik.http.routers.affine.service: affine
      traefik.http.routers.affine.tls.certresolver: myresolver
    logging:
      driver: json-file
      options:
        max-size: 1000m
  affine-redis:
    image: redis
    container_name: affine-redis
    restart: unless-stopped
    networks:
      - tipi_main_network
    healthcheck:
      test: redis-cli --raw incr ping
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${APP_DATA_DIR}/data/redis:/data
  affine-postgres:
    image: postgres:16
    container_name: affine-postgres
    restart: unless-stopped
    networks:
      - tipi_main_network
    healthcheck:
      test: pg_isready -d
        postgres://tipi:${AFFINE_POSTGRES_PASSWORD}@affine-postgres:5432/affine
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: tipi
      POSTGRES_PASSWORD: ${AFFINE_POSTGRES_PASSWORD}
      POSTGRES_DB: affine
    volumes:
      - ${APP_DATA_DIR}/data/postgres:/var/lib/postgresql/data
networks:
  tipi_main_network:
    name: runtipi_tipi_main_network
    external: true

