services:
  umami:
    image: ghcr.io/umami-software/umami:postgresql-v1.40.0
    container_name: umami
    restart: unless-stopped
    networks:
      - tipi_main_network
    environment:
      DATABASE_URL: postgresql://umami:${DB_PASSWORD}@umami-db:5432/umami
      DATABASE_TYPE: postgresql
      HASH_SALT: ${HASH_SALT}
    ports:
      - ${APP_PORT}:3000
    depends_on:
      umami-db:
        condition: service_healthy
    labels:
      generated: true
      traefik.enable: true
      traefik.http.middlewares.umami-web-redirect.redirectscheme.scheme: https
      traefik.http.services.umami.loadbalancer.server.port: "3000"
      traefik.http.routers.umami-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.umami-insecure.entrypoints: web
      traefik.http.routers.umami-insecure.service: umami
      traefik.http.routers.umami-insecure.middlewares: umami-web-redirect
      traefik.http.routers.umami.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.umami.entrypoints: websecure
      traefik.http.routers.umami.service: umami
      traefik.http.routers.umami.tls.certresolver: myresolver
  umami-db:
    image: postgres:12-alpine
    container_name: umami-db
    restart: unless-stopped
    networks:
      - tipi_main_network
    healthcheck:
      test: pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      retries: 3
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ${APP_DATA_DIR}/data/postgres:/var/lib/postgresql/data
networks:
  tipi_main_network:
    name: runtipi_tipi_main_network
    external: true

